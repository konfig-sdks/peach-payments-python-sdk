# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class GenerateLinkPayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "options",
            "payment",
            "checkout",
            "customer",
        }
        
        class properties:
        
            @staticmethod
            def payment() -> typing.Type['GenerateLinkPaymentPayment']:
                return GenerateLinkPaymentPayment
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
        
            @staticmethod
            def options() -> typing.Type['PaymentOptions']:
                return PaymentOptions
        
            @staticmethod
            def checkout() -> typing.Type['CheckoutOptions']:
                return CheckoutOptions
            __annotations__ = {
                "payment": payment,
                "customer": customer,
                "options": options,
                "checkout": checkout,
            }
    
    options: 'PaymentOptions'
    payment: 'GenerateLinkPaymentPayment'
    checkout: 'CheckoutOptions'
    customer: 'Customer'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> 'GenerateLinkPaymentPayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'PaymentOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkout"]) -> 'CheckoutOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payment", "customer", "options", "checkout", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> 'GenerateLinkPaymentPayment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> 'PaymentOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkout"]) -> 'CheckoutOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payment", "customer", "options", "checkout", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        options: 'PaymentOptions',
        payment: 'GenerateLinkPaymentPayment',
        checkout: 'CheckoutOptions',
        customer: 'Customer',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateLinkPayment':
        return super().__new__(
            cls,
            *args,
            options=options,
            payment=payment,
            checkout=checkout,
            customer=customer,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.checkout_options import CheckoutOptions
from peach_payments_python_sdk.model.customer import Customer
from peach_payments_python_sdk.model.generate_link_payment_payment import GenerateLinkPaymentPayment
from peach_payments_python_sdk.model.payment_options import PaymentOptions
