# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class GenerateLinkPaymentPayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The payment object contains the payment details, files, and notes for the payment link.
    """


    class MetaOapg:
        required = {
            "amount",
            "merchantInvoiceId",
            "currency",
        }
        
        class properties:
            
            
            class merchantInvoiceId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 8
            amount = schemas.NumberSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
                    min_length = 3
                    enum_value_to_name = {
                        "ZAR": "ZAR",
                        "KES": "KES",
                        "USD": "USD",
                    }
                
                @schemas.classproperty
                def ZAR(cls):
                    return cls("ZAR")
                
                @schemas.classproperty
                def KES(cls):
                    return cls("KES")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
        
            @staticmethod
            def files() -> typing.Type['GenerateLinkPaymentPaymentFiles']:
                return GenerateLinkPaymentPaymentFiles
            
            
            class notes(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 140
            __annotations__ = {
                "merchantInvoiceId": merchantInvoiceId,
                "amount": amount,
                "currency": currency,
                "files": files,
                "notes": notes,
            }
    
    amount: MetaOapg.properties.amount
    merchantInvoiceId: MetaOapg.properties.merchantInvoiceId
    currency: MetaOapg.properties.currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantInvoiceId"]) -> MetaOapg.properties.merchantInvoiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> 'GenerateLinkPaymentPaymentFiles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchantInvoiceId", "amount", "currency", "files", "notes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantInvoiceId"]) -> MetaOapg.properties.merchantInvoiceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> typing.Union['GenerateLinkPaymentPaymentFiles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchantInvoiceId", "amount", "currency", "files", "notes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        merchantInvoiceId: typing.Union[MetaOapg.properties.merchantInvoiceId, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        files: typing.Union['GenerateLinkPaymentPaymentFiles', schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateLinkPaymentPayment':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            merchantInvoiceId=merchantInvoiceId,
            currency=currency,
            files=files,
            notes=notes,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.generate_link_payment_payment_files import GenerateLinkPaymentPaymentFiles
