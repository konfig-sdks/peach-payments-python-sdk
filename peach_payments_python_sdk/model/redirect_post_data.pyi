# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class RedirectPostData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.StrSchema
            checkoutId = schemas.StrSchema
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ZAR(cls):
                    return cls("ZAR")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
                
                @schemas.classproperty
                def KES(cls):
                    return cls("KES")
                
                @schemas.classproperty
                def MUR(cls):
                    return cls("MUR")
                
                @schemas.classproperty
                def GBP(cls):
                    return cls("GBP")
                
                @schemas.classproperty
                def EUR(cls):
                    return cls("EUR")
            merchantTransactionId = schemas.StrSchema
            
            
            class paymentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DB(cls):
                    return cls("DB")
            result_code = schemas.StrSchema
            result_description = schemas.StrSchema
            timestamp = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "checkoutId": checkoutId,
                "currency": currency,
                "merchantTransactionId": merchantTransactionId,
                "paymentType": paymentType,
                "result.code": result_code,
                "result.description": result_description,
                "timestamp": timestamp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkoutId"]) -> MetaOapg.properties.checkoutId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantTransactionId"]) -> MetaOapg.properties.merchantTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> MetaOapg.properties.paymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result.code"]) -> MetaOapg.properties.result_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result.description"]) -> MetaOapg.properties.result_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "checkoutId", "currency", "merchantTransactionId", "paymentType", "result.code", "result.description", "timestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkoutId"]) -> typing.Union[MetaOapg.properties.checkoutId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantTransactionId"]) -> typing.Union[MetaOapg.properties.merchantTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> typing.Union[MetaOapg.properties.paymentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result.code"]) -> typing.Union[MetaOapg.properties.result_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result.description"]) -> typing.Union[MetaOapg.properties.result_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "checkoutId", "currency", "merchantTransactionId", "paymentType", "result.code", "result.description", "timestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        checkoutId: typing.Union[MetaOapg.properties.checkoutId, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        merchantTransactionId: typing.Union[MetaOapg.properties.merchantTransactionId, str, schemas.Unset] = schemas.unset,
        paymentType: typing.Union[MetaOapg.properties.paymentType, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RedirectPostData':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            checkoutId=checkoutId,
            currency=currency,
            merchantTransactionId=merchantTransactionId,
            paymentType=paymentType,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )
