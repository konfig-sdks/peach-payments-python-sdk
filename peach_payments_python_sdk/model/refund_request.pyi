# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class RefundRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Refund a successful debit transaction.
    """


    class MetaOapg:
        required = {
            "amount",
            "currency",
            "authentication",
            "paymentType",
        }
        
        class properties:
        
            @staticmethod
            def authentication() -> typing.Type['Authentication']:
                return Authentication
        
            @staticmethod
            def amount() -> typing.Type['Amount']:
                return Amount
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
        
            @staticmethod
            def paymentType() -> typing.Type['RefundPaymentType']:
                return RefundPaymentType
            __annotations__ = {
                "authentication": authentication,
                "amount": amount,
                "currency": currency,
                "paymentType": paymentType,
            }
    
    amount: 'Amount'
    currency: 'Currency'
    authentication: 'Authentication'
    paymentType: 'RefundPaymentType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication"]) -> 'Authentication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'Amount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> 'RefundPaymentType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authentication", "amount", "currency", "paymentType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication"]) -> 'Authentication': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'Amount': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> 'RefundPaymentType': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authentication", "amount", "currency", "paymentType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: 'Amount',
        currency: 'Currency',
        authentication: 'Authentication',
        paymentType: 'RefundPaymentType',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RefundRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            currency=currency,
            authentication=authentication,
            paymentType=paymentType,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.amount import Amount
from peach_payments_python_sdk.model.authentication import Authentication
from peach_payments_python_sdk.model.currency import Currency
from peach_payments_python_sdk.model.refund_payment_type import RefundPaymentType
