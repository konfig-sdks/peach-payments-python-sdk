# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Authentication(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Authenticate requests using the userId, password, and entityId.
    """


    class MetaOapg:
        required = {
            "password",
            "entityId",
            "userId",
        }
        
        class properties:
        
            @staticmethod
            def userId() -> typing.Type['UserId']:
                return UserId
            password = schemas.StrSchema
        
            @staticmethod
            def entityId() -> typing.Type['EntityId']:
                return EntityId
            __annotations__ = {
                "userId": userId,
                "password": password,
                "entityId": entityId,
            }
    
    password: MetaOapg.properties.password
    entityId: 'EntityId'
    userId: 'UserId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityId"]) -> 'EntityId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userId", "password", "entityId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> 'UserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityId"]) -> 'EntityId': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userId", "password", "entityId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        entityId: 'EntityId',
        userId: 'UserId',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Authentication':
        return super().__new__(
            cls,
            *args,
            password=password,
            entityId=entityId,
            userId=userId,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.entity_id import EntityId
from peach_payments_python_sdk.model.user_id import UserId
