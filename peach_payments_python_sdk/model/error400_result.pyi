# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Error400Result(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Error result object describing the error code and parameter errors.
    """


    class MetaOapg:
        required = {
            "code",
            "parameterErrors",
            "description",
        }
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def code() -> typing.Type['Code']:
                return Code
        
            @staticmethod
            def parameterErrors() -> typing.Type['ParameterErrors']:
                return ParameterErrors
            __annotations__ = {
                "description": description,
                "code": code,
                "parameterErrors": parameterErrors,
            }
    
    code: 'Code'
    parameterErrors: 'ParameterErrors'
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> 'Code': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameterErrors"]) -> 'ParameterErrors': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "code", "parameterErrors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> 'Code': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameterErrors"]) -> 'ParameterErrors': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "code", "parameterErrors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: 'Code',
        parameterErrors: 'ParameterErrors',
        description: typing.Union[MetaOapg.properties.description, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Error400Result':
        return super().__new__(
            cls,
            *args,
            code=code,
            parameterErrors=parameterErrors,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.code import Code
from peach_payments_python_sdk.model.parameter_errors import ParameterErrors
