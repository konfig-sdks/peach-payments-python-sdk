# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class QueryStatusResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def payment() -> typing.Type['QueryStatusResponsePayment']:
                return QueryStatusResponsePayment
            
            
            class source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "API": "API",
                        "Xero": "XERO",
                        "UI": "UI",
                    }
                
                @schemas.classproperty
                def API(cls):
                    return cls("API")
                
                @schemas.classproperty
                def XERO(cls):
                    return cls("Xero")
                
                @schemas.classproperty
                def UI(cls):
                    return cls("UI")
            createdAt = schemas.StrSchema
            updatedAt = schemas.StrSchema
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
        
            @staticmethod
            def options() -> typing.Type['PaymentResponseOptions']:
                return PaymentResponseOptions
        
            @staticmethod
            def checkout() -> typing.Type['CheckoutState']:
                return CheckoutState
        
            @staticmethod
            def termsOfService() -> typing.Type['QueryStatusResponseTermsOfService']:
                return QueryStatusResponseTermsOfService
            __annotations__ = {
                "id": id,
                "payment": payment,
                "source": source,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "customer": customer,
                "options": options,
                "checkout": checkout,
                "termsOfService": termsOfService,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> 'QueryStatusResponsePayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'PaymentResponseOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkout"]) -> 'CheckoutState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["termsOfService"]) -> 'QueryStatusResponseTermsOfService': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "payment", "source", "createdAt", "updatedAt", "customer", "options", "checkout", "termsOfService", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> typing.Union['QueryStatusResponsePayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['PaymentResponseOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkout"]) -> typing.Union['CheckoutState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["termsOfService"]) -> typing.Union['QueryStatusResponseTermsOfService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "payment", "source", "createdAt", "updatedAt", "customer", "options", "checkout", "termsOfService", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        payment: typing.Union['QueryStatusResponsePayment', schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, schemas.Unset] = schemas.unset,
        customer: typing.Union['Customer', schemas.Unset] = schemas.unset,
        options: typing.Union['PaymentResponseOptions', schemas.Unset] = schemas.unset,
        checkout: typing.Union['CheckoutState', schemas.Unset] = schemas.unset,
        termsOfService: typing.Union['QueryStatusResponseTermsOfService', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QueryStatusResponse':
        return super().__new__(
            cls,
            *args,
            id=id,
            payment=payment,
            source=source,
            createdAt=createdAt,
            updatedAt=updatedAt,
            customer=customer,
            options=options,
            checkout=checkout,
            termsOfService=termsOfService,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.checkout_state import CheckoutState
from peach_payments_python_sdk.model.customer import Customer
from peach_payments_python_sdk.model.payment_response_options import PaymentResponseOptions
from peach_payments_python_sdk.model.query_status_response_payment import QueryStatusResponsePayment
from peach_payments_python_sdk.model.query_status_response_terms_of_service import QueryStatusResponseTermsOfService
