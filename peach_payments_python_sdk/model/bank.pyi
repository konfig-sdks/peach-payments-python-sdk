# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Bank(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Customer bank account details.
    """


    class MetaOapg:
        
        class properties:
            
            
            class holder(
                schemas.StrSchema
            ):
                pass
            
            
            class bankName(
                schemas.StrSchema
            ):
                pass
            
            
            class number(
                schemas.StrSchema
            ):
                pass
            
            
            class iban(
                schemas.StrSchema
            ):
                pass
            
            
            class bic(
                schemas.StrSchema
            ):
                pass
            
            
            class bankCode(
                schemas.StrSchema
            ):
                pass
            
            
            class country(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def mandate() -> typing.Type['Mandate']:
                return Mandate
            
            
            class transactionDueDate(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "holder": holder,
                "bankName": bankName,
                "number": number,
                "iban": iban,
                "bic": bic,
                "bankCode": bankCode,
                "country": country,
                "mandate": mandate,
                "transactionDueDate": transactionDueDate,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holder"]) -> MetaOapg.properties.holder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankName"]) -> MetaOapg.properties.bankName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iban"]) -> MetaOapg.properties.iban: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bic"]) -> MetaOapg.properties.bic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankCode"]) -> MetaOapg.properties.bankCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandate"]) -> 'Mandate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionDueDate"]) -> MetaOapg.properties.transactionDueDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["holder", "bankName", "number", "iban", "bic", "bankCode", "country", "mandate", "transactionDueDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holder"]) -> typing.Union[MetaOapg.properties.holder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankName"]) -> typing.Union[MetaOapg.properties.bankName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> typing.Union[MetaOapg.properties.number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iban"]) -> typing.Union[MetaOapg.properties.iban, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bic"]) -> typing.Union[MetaOapg.properties.bic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankCode"]) -> typing.Union[MetaOapg.properties.bankCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandate"]) -> typing.Union['Mandate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionDueDate"]) -> typing.Union[MetaOapg.properties.transactionDueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["holder", "bankName", "number", "iban", "bic", "bankCode", "country", "mandate", "transactionDueDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        holder: typing.Union[MetaOapg.properties.holder, str, schemas.Unset] = schemas.unset,
        bankName: typing.Union[MetaOapg.properties.bankName, str, schemas.Unset] = schemas.unset,
        number: typing.Union[MetaOapg.properties.number, str, schemas.Unset] = schemas.unset,
        iban: typing.Union[MetaOapg.properties.iban, str, schemas.Unset] = schemas.unset,
        bic: typing.Union[MetaOapg.properties.bic, str, schemas.Unset] = schemas.unset,
        bankCode: typing.Union[MetaOapg.properties.bankCode, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        mandate: typing.Union['Mandate', schemas.Unset] = schemas.unset,
        transactionDueDate: typing.Union[MetaOapg.properties.transactionDueDate, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Bank':
        return super().__new__(
            cls,
            *args,
            holder=holder,
            bankName=bankName,
            number=number,
            iban=iban,
            bic=bic,
            bankCode=bankCode,
            country=country,
            mandate=mandate,
            transactionDueDate=transactionDueDate,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.mandate import Mandate
