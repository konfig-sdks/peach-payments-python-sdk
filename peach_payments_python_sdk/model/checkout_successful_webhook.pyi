# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class CheckoutSuccessfulWebhook(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Webhook sent when a checkout instance is successfully completed.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    merchant_name = schemas.StrSchema
                    recon_auth_code = schemas.StrSchema
                    recon_result_code = schemas.StrSchema
                    recon_rrn = schemas.StrSchema
                    result_code = schemas.StrSchema
                    result_description = schemas.StrSchema
                    result_details_acquirer_response = schemas.StrSchema
                    result_details_connector_tx_id1 = schemas.StrSchema
                    result_details_extended_description = schemas.StrSchema
                    __annotations__ = {
                        "merchant.name": merchant_name,
                        "recon.authCode": recon_auth_code,
                        "recon.resultCode": recon_result_code,
                        "recon.rrn": recon_rrn,
                        "result.code": result_code,
                        "result.description": result_description,
                        "resultDetails.AcquirerResponse": result_details_acquirer_response,
                        "resultDetails.ConnectorTxID1": result_details_connector_tx_id1,
                        "resultDetails.ExtendedDescription": result_details_extended_description,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["merchant.name"]) -> MetaOapg.properties.merchant_name: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["recon.authCode"]) -> MetaOapg.properties.recon_auth_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["recon.resultCode"]) -> MetaOapg.properties.recon_result_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["recon.rrn"]) -> MetaOapg.properties.recon_rrn: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["result.code"]) -> MetaOapg.properties.result_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["result.description"]) -> MetaOapg.properties.result_description: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resultDetails.AcquirerResponse"]) -> MetaOapg.properties.result_details_acquirer_response: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resultDetails.ConnectorTxID1"]) -> MetaOapg.properties.result_details_connector_tx_id1: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["resultDetails.ExtendedDescription"]) -> MetaOapg.properties.result_details_extended_description: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchant.name", "recon.authCode", "recon.resultCode", "recon.rrn", "result.code", "result.description", "resultDetails.AcquirerResponse", "resultDetails.ConnectorTxID1", "resultDetails.ExtendedDescription", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["merchant.name"]) -> typing.Union[MetaOapg.properties.merchant_name, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["recon.authCode"]) -> typing.Union[MetaOapg.properties.recon_auth_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["recon.resultCode"]) -> typing.Union[MetaOapg.properties.recon_result_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["recon.rrn"]) -> typing.Union[MetaOapg.properties.recon_rrn, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["result.code"]) -> typing.Union[MetaOapg.properties.result_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["result.description"]) -> typing.Union[MetaOapg.properties.result_description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resultDetails.AcquirerResponse"]) -> typing.Union[MetaOapg.properties.result_details_acquirer_response, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resultDetails.ConnectorTxID1"]) -> typing.Union[MetaOapg.properties.result_details_connector_tx_id1, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["resultDetails.ExtendedDescription"]) -> typing.Union[MetaOapg.properties.result_details_extended_description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchant.name", "recon.authCode", "recon.resultCode", "recon.rrn", "result.code", "result.description", "resultDetails.AcquirerResponse", "resultDetails.ConnectorTxID1", "resultDetails.ExtendedDescription", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_2(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class one_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        
                        class properties:
                            card_bin = schemas.StrSchema
                            card_holder = schemas.StrSchema
                            card_last4_digits = schemas.StrSchema
                            __annotations__ = {
                                "card.bin": card_bin,
                                "card.holder": card_holder,
                                "card.last4Digits": card_last4_digits,
                            }
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["card.bin"]) -> MetaOapg.properties.card_bin: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["card.holder"]) -> MetaOapg.properties.card_holder: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["card.last4Digits"]) -> MetaOapg.properties.card_last4_digits: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["card.bin", "card.holder", "card.last4Digits", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["card.bin"]) -> typing.Union[MetaOapg.properties.card_bin, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["card.holder"]) -> typing.Union[MetaOapg.properties.card_holder, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["card.last4Digits"]) -> typing.Union[MetaOapg.properties.card_last4_digits, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["card.bin", "card.holder", "card.last4Digits", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'one_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class one_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        
                        class properties:
                            paymentBrand = schemas.StrSchema
                            __annotations__ = {
                                "paymentBrand": paymentBrand,
                            }
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["paymentBrand"]) -> MetaOapg.properties.paymentBrand: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentBrand", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["paymentBrand"]) -> typing.Union[MetaOapg.properties.paymentBrand, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentBrand", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        paymentBrand: typing.Union[MetaOapg.properties.paymentBrand, str, schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'one_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            paymentBrand=paymentBrand,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def one_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.one_of_0,
                        cls.one_of_1,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_2':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CheckoutPendingWebhook,
                cls.all_of_1,
                cls.all_of_2,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CheckoutSuccessfulWebhook':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.checkout_pending_webhook import CheckoutPendingWebhook
