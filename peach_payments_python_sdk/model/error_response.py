# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class ErrorResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Error object describing the error.
    """


    class MetaOapg:
        required = {
            "result",
            "timestamp",
        }
        
        class properties:
        
            @staticmethod
            def result() -> typing.Type['Result']:
                return Result
            timestamp = schemas.DateTimeSchema
        
            @staticmethod
            def resultDetails() -> typing.Type['ResultDetails']:
                return ResultDetails
        
            @staticmethod
            def id() -> typing.Type['UniqueId']:
                return UniqueId
        
            @staticmethod
            def paymentType() -> typing.Type['PaymentType']:
                return PaymentType
        
            @staticmethod
            def paymentBrand() -> typing.Type['PaymentBrand']:
                return PaymentBrand
            customParameters = schemas.DictSchema
        
            @staticmethod
            def amount() -> typing.Type['Amount']:
                return Amount
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            __annotations__ = {
                "result": result,
                "timestamp": timestamp,
                "resultDetails": resultDetails,
                "id": id,
                "paymentType": paymentType,
                "paymentBrand": paymentBrand,
                "customParameters": customParameters,
                "amount": amount,
                "currency": currency,
            }
    
    result: 'Result'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> 'Result': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultDetails"]) -> 'ResultDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'UniqueId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentType"]) -> 'PaymentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentBrand"]) -> 'PaymentBrand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customParameters"]) -> MetaOapg.properties.customParameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'Amount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["result", "timestamp", "resultDetails", "id", "paymentType", "paymentBrand", "customParameters", "amount", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> 'Result': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultDetails"]) -> typing.Union['ResultDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union['UniqueId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentType"]) -> typing.Union['PaymentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentBrand"]) -> typing.Union['PaymentBrand', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customParameters"]) -> typing.Union[MetaOapg.properties.customParameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['Amount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["result", "timestamp", "resultDetails", "id", "paymentType", "paymentBrand", "customParameters", "amount", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        result: 'Result',
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        resultDetails: typing.Union['ResultDetails', schemas.Unset] = schemas.unset,
        id: typing.Union['UniqueId', schemas.Unset] = schemas.unset,
        paymentType: typing.Union['PaymentType', schemas.Unset] = schemas.unset,
        paymentBrand: typing.Union['PaymentBrand', schemas.Unset] = schemas.unset,
        customParameters: typing.Union[MetaOapg.properties.customParameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        amount: typing.Union['Amount', schemas.Unset] = schemas.unset,
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorResponse':
        return super().__new__(
            cls,
            *args,
            result=result,
            timestamp=timestamp,
            resultDetails=resultDetails,
            id=id,
            paymentType=paymentType,
            paymentBrand=paymentBrand,
            customParameters=customParameters,
            amount=amount,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.amount import Amount
from peach_payments_python_sdk.model.currency import Currency
from peach_payments_python_sdk.model.payment_brand import PaymentBrand
from peach_payments_python_sdk.model.payment_type import PaymentType
from peach_payments_python_sdk.model.result import Result
from peach_payments_python_sdk.model.result_details import ResultDetails
from peach_payments_python_sdk.model.unique_id import UniqueId
