# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class CustomerBrowser(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The customer's browser details.
    """


    class MetaOapg:
        
        class properties:
            
            
            class acceptHeader(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,2048}$',
                    }]
            
            
            class language(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,8}$',
                    }]
            
            
            class screenHeight(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,6}$',
                    }]
            
            
            class screenWidth(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,6}$',
                    }]
            
            
            class timezone(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,5}$',
                    }]
            
            
            class userAgent(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\s\S]{1,2048}$',
                    }]
            
            
            class javaEnabled(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(true|false)$',
                    }]
            
            
            class javascriptEnabled(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(true|false)$',
                    }]
            
            
            class screenColorDepth(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[0-9]{1,2}$',
                    }]
            
            
            class challengeWindow(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[0-9]{1,2}$',
                    }]
            __annotations__ = {
                "acceptHeader": acceptHeader,
                "language": language,
                "screenHeight": screenHeight,
                "screenWidth": screenWidth,
                "timezone": timezone,
                "userAgent": userAgent,
                "javaEnabled": javaEnabled,
                "javascriptEnabled": javascriptEnabled,
                "screenColorDepth": screenColorDepth,
                "challengeWindow": challengeWindow,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptHeader"]) -> MetaOapg.properties.acceptHeader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screenHeight"]) -> MetaOapg.properties.screenHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screenWidth"]) -> MetaOapg.properties.screenWidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAgent"]) -> MetaOapg.properties.userAgent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["javaEnabled"]) -> MetaOapg.properties.javaEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["javascriptEnabled"]) -> MetaOapg.properties.javascriptEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screenColorDepth"]) -> MetaOapg.properties.screenColorDepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["challengeWindow"]) -> MetaOapg.properties.challengeWindow: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acceptHeader", "language", "screenHeight", "screenWidth", "timezone", "userAgent", "javaEnabled", "javascriptEnabled", "screenColorDepth", "challengeWindow", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptHeader"]) -> typing.Union[MetaOapg.properties.acceptHeader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screenHeight"]) -> typing.Union[MetaOapg.properties.screenHeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screenWidth"]) -> typing.Union[MetaOapg.properties.screenWidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAgent"]) -> typing.Union[MetaOapg.properties.userAgent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["javaEnabled"]) -> typing.Union[MetaOapg.properties.javaEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["javascriptEnabled"]) -> typing.Union[MetaOapg.properties.javascriptEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screenColorDepth"]) -> typing.Union[MetaOapg.properties.screenColorDepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["challengeWindow"]) -> typing.Union[MetaOapg.properties.challengeWindow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acceptHeader", "language", "screenHeight", "screenWidth", "timezone", "userAgent", "javaEnabled", "javascriptEnabled", "screenColorDepth", "challengeWindow", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        acceptHeader: typing.Union[MetaOapg.properties.acceptHeader, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        screenHeight: typing.Union[MetaOapg.properties.screenHeight, str, schemas.Unset] = schemas.unset,
        screenWidth: typing.Union[MetaOapg.properties.screenWidth, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        userAgent: typing.Union[MetaOapg.properties.userAgent, str, schemas.Unset] = schemas.unset,
        javaEnabled: typing.Union[MetaOapg.properties.javaEnabled, str, schemas.Unset] = schemas.unset,
        javascriptEnabled: typing.Union[MetaOapg.properties.javascriptEnabled, str, schemas.Unset] = schemas.unset,
        screenColorDepth: typing.Union[MetaOapg.properties.screenColorDepth, str, schemas.Unset] = schemas.unset,
        challengeWindow: typing.Union[MetaOapg.properties.challengeWindow, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerBrowser':
        return super().__new__(
            cls,
            *args,
            acceptHeader=acceptHeader,
            language=language,
            screenHeight=screenHeight,
            screenWidth=screenWidth,
            timezone=timezone,
            userAgent=userAgent,
            javaEnabled=javaEnabled,
            javascriptEnabled=javascriptEnabled,
            screenColorDepth=screenColorDepth,
            challengeWindow=challengeWindow,
            _configuration=_configuration,
            **kwargs,
        )
