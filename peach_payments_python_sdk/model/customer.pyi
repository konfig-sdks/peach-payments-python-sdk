# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Customer(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Optional object sent if customer data is required.
    """


    class MetaOapg:
        required = {
            "givenName",
        }
        
        class properties:
            
            
            class givenName(
                schemas.StrSchema
            ):
                pass
            
            
            class surname(
                schemas.StrSchema
            ):
                pass
            
            
            class email(
                schemas.StrSchema
            ):
                pass
            
            
            class mobile(
                schemas.StrSchema
            ):
                pass
            
            
            class whatsapp(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def billing() -> typing.Type['Address']:
                return Address
            
            
            class fax(
                schemas.StrSchema
            ):
                pass
            
            
            class phone(
                schemas.StrSchema
            ):
                pass
            
            
            class ip(
                schemas.StrSchema
            ):
                pass
            
            
            class merchantCustomerLanguage(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.StrSchema
            ):
                pass
            
            
            class merchantCustomerId(
                schemas.StrSchema
            ):
                pass
            
            
            class taxId(
                schemas.StrSchema
            ):
                pass
            
            
            class taxType(
                schemas.StrSchema
            ):
                pass
            
            
            class birthDate(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def browser() -> typing.Type['CustomerBrowser']:
                return CustomerBrowser
            __annotations__ = {
                "givenName": givenName,
                "surname": surname,
                "email": email,
                "mobile": mobile,
                "whatsapp": whatsapp,
                "billing": billing,
                "fax": fax,
                "phone": phone,
                "ip": ip,
                "merchantCustomerLanguage": merchantCustomerLanguage,
                "status": status,
                "merchantCustomerId": merchantCustomerId,
                "taxId": taxId,
                "taxType": taxType,
                "birthDate": birthDate,
                "browser": browser,
            }
    
    givenName: MetaOapg.properties.givenName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobile"]) -> MetaOapg.properties.mobile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["whatsapp"]) -> MetaOapg.properties.whatsapp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fax"]) -> MetaOapg.properties.fax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip"]) -> MetaOapg.properties.ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantCustomerLanguage"]) -> MetaOapg.properties.merchantCustomerLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantCustomerId"]) -> MetaOapg.properties.merchantCustomerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxId"]) -> MetaOapg.properties.taxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxType"]) -> MetaOapg.properties.taxType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser"]) -> 'CustomerBrowser': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["givenName", "surname", "email", "mobile", "whatsapp", "billing", "fax", "phone", "ip", "merchantCustomerLanguage", "status", "merchantCustomerId", "taxId", "taxType", "birthDate", "browser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> typing.Union[MetaOapg.properties.surname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobile"]) -> typing.Union[MetaOapg.properties.mobile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["whatsapp"]) -> typing.Union[MetaOapg.properties.whatsapp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fax"]) -> typing.Union[MetaOapg.properties.fax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip"]) -> typing.Union[MetaOapg.properties.ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantCustomerLanguage"]) -> typing.Union[MetaOapg.properties.merchantCustomerLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantCustomerId"]) -> typing.Union[MetaOapg.properties.merchantCustomerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxId"]) -> typing.Union[MetaOapg.properties.taxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxType"]) -> typing.Union[MetaOapg.properties.taxType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser"]) -> typing.Union['CustomerBrowser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["givenName", "surname", "email", "mobile", "whatsapp", "billing", "fax", "phone", "ip", "merchantCustomerLanguage", "status", "merchantCustomerId", "taxId", "taxType", "birthDate", "browser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        givenName: typing.Union[MetaOapg.properties.givenName, str, ],
        surname: typing.Union[MetaOapg.properties.surname, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        mobile: typing.Union[MetaOapg.properties.mobile, str, schemas.Unset] = schemas.unset,
        whatsapp: typing.Union[MetaOapg.properties.whatsapp, str, schemas.Unset] = schemas.unset,
        billing: typing.Union['Address', schemas.Unset] = schemas.unset,
        fax: typing.Union[MetaOapg.properties.fax, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        ip: typing.Union[MetaOapg.properties.ip, str, schemas.Unset] = schemas.unset,
        merchantCustomerLanguage: typing.Union[MetaOapg.properties.merchantCustomerLanguage, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        merchantCustomerId: typing.Union[MetaOapg.properties.merchantCustomerId, str, schemas.Unset] = schemas.unset,
        taxId: typing.Union[MetaOapg.properties.taxId, str, schemas.Unset] = schemas.unset,
        taxType: typing.Union[MetaOapg.properties.taxType, str, schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, schemas.Unset] = schemas.unset,
        browser: typing.Union['CustomerBrowser', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Customer':
        return super().__new__(
            cls,
            *args,
            givenName=givenName,
            surname=surname,
            email=email,
            mobile=mobile,
            whatsapp=whatsapp,
            billing=billing,
            fax=fax,
            phone=phone,
            ip=ip,
            merchantCustomerLanguage=merchantCustomerLanguage,
            status=status,
            merchantCustomerId=merchantCustomerId,
            taxId=taxId,
            taxType=taxType,
            birthDate=birthDate,
            browser=browser,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.address import Address
from peach_payments_python_sdk.model.customer_browser import CustomerBrowser
