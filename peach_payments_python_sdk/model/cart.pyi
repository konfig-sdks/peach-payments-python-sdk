# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Cart(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Customer cart data.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def cartItems() -> typing.Type['CartCartItems']:
                return CartCartItems
            
            
            class tax(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def shippingAmount() -> typing.Type['Amount']:
                return Amount
            
            
            class discount(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "cartItems": cartItems,
                "tax": tax,
                "shippingAmount": shippingAmount,
                "discount": discount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cartItems"]) -> 'CartCartItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> MetaOapg.properties.tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shippingAmount"]) -> 'Amount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> MetaOapg.properties.discount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cartItems", "tax", "shippingAmount", "discount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cartItems"]) -> typing.Union['CartCartItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union[MetaOapg.properties.tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shippingAmount"]) -> typing.Union['Amount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> typing.Union[MetaOapg.properties.discount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cartItems", "tax", "shippingAmount", "discount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cartItems: typing.Union['CartCartItems', schemas.Unset] = schemas.unset,
        tax: typing.Union[MetaOapg.properties.tax, str, schemas.Unset] = schemas.unset,
        shippingAmount: typing.Union['Amount', schemas.Unset] = schemas.unset,
        discount: typing.Union[MetaOapg.properties.discount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Cart':
        return super().__new__(
            cls,
            *args,
            cartItems=cartItems,
            tax=tax,
            shippingAmount=shippingAmount,
            discount=discount,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.amount import Amount
from peach_payments_python_sdk.model.cart_cart_items import CartCartItems
