# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class Recon(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Transaction reconciliation data.
    """


    class MetaOapg:
        
        class properties:
            ciMerchantNumber = schemas.StrSchema
            rrn = schemas.StrSchema
            authCode = schemas.StrSchema
            resultCode = schemas.StrSchema
            stan = schemas.StrSchema
            __annotations__ = {
                "ciMerchantNumber": ciMerchantNumber,
                "rrn": rrn,
                "authCode": authCode,
                "resultCode": resultCode,
                "stan": stan,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ciMerchantNumber"]) -> MetaOapg.properties.ciMerchantNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rrn"]) -> MetaOapg.properties.rrn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultCode"]) -> MetaOapg.properties.resultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stan"]) -> MetaOapg.properties.stan: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ciMerchantNumber", "rrn", "authCode", "resultCode", "stan", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ciMerchantNumber"]) -> typing.Union[MetaOapg.properties.ciMerchantNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rrn"]) -> typing.Union[MetaOapg.properties.rrn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authCode"]) -> typing.Union[MetaOapg.properties.authCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultCode"]) -> typing.Union[MetaOapg.properties.resultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stan"]) -> typing.Union[MetaOapg.properties.stan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ciMerchantNumber", "rrn", "authCode", "resultCode", "stan", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ciMerchantNumber: typing.Union[MetaOapg.properties.ciMerchantNumber, str, schemas.Unset] = schemas.unset,
        rrn: typing.Union[MetaOapg.properties.rrn, str, schemas.Unset] = schemas.unset,
        authCode: typing.Union[MetaOapg.properties.authCode, str, schemas.Unset] = schemas.unset,
        resultCode: typing.Union[MetaOapg.properties.resultCode, str, schemas.Unset] = schemas.unset,
        stan: typing.Union[MetaOapg.properties.stan, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Recon':
        return super().__new__(
            cls,
            *args,
            ciMerchantNumber=ciMerchantNumber,
            rrn=rrn,
            authCode=authCode,
            resultCode=resultCode,
            stan=stan,
            _configuration=_configuration,
            **kwargs,
        )
