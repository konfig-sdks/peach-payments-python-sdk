# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class ResultDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Additional details that can provide information about the status or result of the transaction.
    """


    class MetaOapg:
        
        class properties:
            ExtendedDescription = schemas.StrSchema
            AcquirerResponse = schemas.StrSchema
            UserDisplayMessage = schemas.StrSchema
            __annotations__ = {
                "ExtendedDescription": ExtendedDescription,
                "AcquirerResponse": AcquirerResponse,
                "UserDisplayMessage": UserDisplayMessage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExtendedDescription"]) -> MetaOapg.properties.ExtendedDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AcquirerResponse"]) -> MetaOapg.properties.AcquirerResponse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserDisplayMessage"]) -> MetaOapg.properties.UserDisplayMessage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ExtendedDescription", "AcquirerResponse", "UserDisplayMessage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExtendedDescription"]) -> typing.Union[MetaOapg.properties.ExtendedDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AcquirerResponse"]) -> typing.Union[MetaOapg.properties.AcquirerResponse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserDisplayMessage"]) -> typing.Union[MetaOapg.properties.UserDisplayMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ExtendedDescription", "AcquirerResponse", "UserDisplayMessage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ExtendedDescription: typing.Union[MetaOapg.properties.ExtendedDescription, str, schemas.Unset] = schemas.unset,
        AcquirerResponse: typing.Union[MetaOapg.properties.AcquirerResponse, str, schemas.Unset] = schemas.unset,
        UserDisplayMessage: typing.Union[MetaOapg.properties.UserDisplayMessage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResultDetails':
        return super().__new__(
            cls,
            *args,
            ExtendedDescription=ExtendedDescription,
            AcquirerResponse=AcquirerResponse,
            UserDisplayMessage=UserDisplayMessage,
            _configuration=_configuration,
            **kwargs,
        )
