# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class CheckoutV2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "amount",
            "authentication.entityId",
            "shopperResultUrl",
            "merchantTransactionId",
            "currency",
            "nonce",
        }
        
        class properties:
            
            
            class authentication_entity_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 32
            
            
            class merchantTransactionId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = '8-16'
                    max_length = 16
                    min_length = 8
            
            
            class amount(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    format = '^[0-9]{1,8}(\\.[0-9]{2})?$'
                    inclusive_maximum = 99999999.99
                    inclusive_minimum = 0.01
            
            
            class currency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ZAR": "ZAR",
                        "USD": "USD",
                        "KES": "KES",
                        "MUR": "MUR",
                        "GBP": "GBP",
                        "EUR": "EUR",
                    }
                
                @schemas.classproperty
                def ZAR(cls):
                    return cls("ZAR")
                
                @schemas.classproperty
                def USD(cls):
                    return cls("USD")
                
                @schemas.classproperty
                def KES(cls):
                    return cls("KES")
                
                @schemas.classproperty
                def MUR(cls):
                    return cls("MUR")
                
                @schemas.classproperty
                def GBP(cls):
                    return cls("GBP")
                
                @schemas.classproperty
                def EUR(cls):
                    return cls("EUR")
            
            
            class nonce(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'string (1-64)'
                    max_length = 64
                    min_length = 1
            shopperResultUrl = schemas.StrSchema
            
            
            class defaultPaymentMethod(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CARD": "CARD",
                        "MASTERPASS": "MASTERPASS",
                        "MOBICRED": "MOBICRED",
                        "EFTSECURE": "EFTSECURE",
                        "MPESA": "MPESA",
                        "1FORYOU": "_1FORYOU",
                        "APLUS": "APLUS",
                        "PAYPAL": "PAYPAL",
                        "ZEROPAY": "ZEROPAY",
                        "PAYFLEX": "PAYFLEX",
                        "FINCHOICEPAY": "FINCHOICEPAY",
                        "BLINKBYEMTEL": "BLINKBYEMTEL",
                        "CAPITECPAY": "CAPITECPAY",
                        "NEDBANKDIRECTEFT": "NEDBANKDIRECTEFT",
                        "PAYBYBANK": "PAYBYBANK",
                        "MCBJUICE": "MCBJUICE",
                    }
                
                @schemas.classproperty
                def CARD(cls):
                    return cls("CARD")
                
                @schemas.classproperty
                def MASTERPASS(cls):
                    return cls("MASTERPASS")
                
                @schemas.classproperty
                def MOBICRED(cls):
                    return cls("MOBICRED")
                
                @schemas.classproperty
                def EFTSECURE(cls):
                    return cls("EFTSECURE")
                
                @schemas.classproperty
                def MPESA(cls):
                    return cls("MPESA")
                
                @schemas.classproperty
                def _1FORYOU(cls):
                    return cls("1FORYOU")
                
                @schemas.classproperty
                def APLUS(cls):
                    return cls("APLUS")
                
                @schemas.classproperty
                def PAYPAL(cls):
                    return cls("PAYPAL")
                
                @schemas.classproperty
                def ZEROPAY(cls):
                    return cls("ZEROPAY")
                
                @schemas.classproperty
                def PAYFLEX(cls):
                    return cls("PAYFLEX")
                
                @schemas.classproperty
                def FINCHOICEPAY(cls):
                    return cls("FINCHOICEPAY")
                
                @schemas.classproperty
                def BLINKBYEMTEL(cls):
                    return cls("BLINKBYEMTEL")
                
                @schemas.classproperty
                def CAPITECPAY(cls):
                    return cls("CAPITECPAY")
                
                @schemas.classproperty
                def NEDBANKDIRECTEFT(cls):
                    return cls("NEDBANKDIRECTEFT")
                
                @schemas.classproperty
                def PAYBYBANK(cls):
                    return cls("PAYBYBANK")
                
                @schemas.classproperty
                def MCBJUICE(cls):
                    return cls("MCBJUICE")
            forceDefaultMethod = schemas.BoolSchema
            
            
            class merchantInvoiceId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'string (8-255)'
                    max_length = 255
                    min_length = 8
            cancelUrl = schemas.StrSchema
            notificationUrl = schemas.StrSchema
        
            @staticmethod
            def customParameters() -> typing.Type['CheckoutV2CustomParameters']:
                return CheckoutV2CustomParameters
        
            @staticmethod
            def customer() -> typing.Type['CheckoutV2Customer']:
                return CheckoutV2Customer
        
            @staticmethod
            def billing() -> typing.Type['CheckoutV2Billing']:
                return CheckoutV2Billing
        
            @staticmethod
            def shipping() -> typing.Type['CheckoutV2Shipping']:
                return CheckoutV2Shipping
            createRegistration = schemas.BoolSchema
            
            
            class originator(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class returnTo(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STORE": "STORE",
                        "INVOICE": "INVOICE",
                    }
                
                @schemas.classproperty
                def STORE(cls):
                    return cls("STORE")
                
                @schemas.classproperty
                def INVOICE(cls):
                    return cls("INVOICE")
            __annotations__ = {
                "authentication.entityId": authentication_entity_id,
                "merchantTransactionId": merchantTransactionId,
                "amount": amount,
                "currency": currency,
                "nonce": nonce,
                "shopperResultUrl": shopperResultUrl,
                "defaultPaymentMethod": defaultPaymentMethod,
                "forceDefaultMethod": forceDefaultMethod,
                "merchantInvoiceId": merchantInvoiceId,
                "cancelUrl": cancelUrl,
                "notificationUrl": notificationUrl,
                "customParameters": customParameters,
                "customer": customer,
                "billing": billing,
                "shipping": shipping,
                "createRegistration": createRegistration,
                "originator": originator,
                "returnTo": returnTo,
            }
    
    amount: MetaOapg.properties.amount
    shopperResultUrl: MetaOapg.properties.shopperResultUrl
    merchantTransactionId: MetaOapg.properties.merchantTransactionId
    currency: MetaOapg.properties.currency
    nonce: MetaOapg.properties.nonce
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication.entityId"]) -> MetaOapg.properties.authentication_entity_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantTransactionId"]) -> MetaOapg.properties.merchantTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shopperResultUrl"]) -> MetaOapg.properties.shopperResultUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultPaymentMethod"]) -> MetaOapg.properties.defaultPaymentMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceDefaultMethod"]) -> MetaOapg.properties.forceDefaultMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantInvoiceId"]) -> MetaOapg.properties.merchantInvoiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelUrl"]) -> MetaOapg.properties.cancelUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationUrl"]) -> MetaOapg.properties.notificationUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customParameters"]) -> 'CheckoutV2CustomParameters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'CheckoutV2Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing"]) -> 'CheckoutV2Billing': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> 'CheckoutV2Shipping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createRegistration"]) -> MetaOapg.properties.createRegistration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originator"]) -> MetaOapg.properties.originator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["returnTo"]) -> MetaOapg.properties.returnTo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authentication.entityId", "merchantTransactionId", "amount", "currency", "nonce", "shopperResultUrl", "defaultPaymentMethod", "forceDefaultMethod", "merchantInvoiceId", "cancelUrl", "notificationUrl", "customParameters", "customer", "billing", "shipping", "createRegistration", "originator", "returnTo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication.entityId"]) -> MetaOapg.properties.authentication_entity_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantTransactionId"]) -> MetaOapg.properties.merchantTransactionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonce"]) -> MetaOapg.properties.nonce: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shopperResultUrl"]) -> MetaOapg.properties.shopperResultUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultPaymentMethod"]) -> typing.Union[MetaOapg.properties.defaultPaymentMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceDefaultMethod"]) -> typing.Union[MetaOapg.properties.forceDefaultMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantInvoiceId"]) -> typing.Union[MetaOapg.properties.merchantInvoiceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelUrl"]) -> typing.Union[MetaOapg.properties.cancelUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationUrl"]) -> typing.Union[MetaOapg.properties.notificationUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customParameters"]) -> typing.Union['CheckoutV2CustomParameters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['CheckoutV2Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing"]) -> typing.Union['CheckoutV2Billing', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union['CheckoutV2Shipping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createRegistration"]) -> typing.Union[MetaOapg.properties.createRegistration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originator"]) -> typing.Union[MetaOapg.properties.originator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["returnTo"]) -> typing.Union[MetaOapg.properties.returnTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authentication.entityId", "merchantTransactionId", "amount", "currency", "nonce", "shopperResultUrl", "defaultPaymentMethod", "forceDefaultMethod", "merchantInvoiceId", "cancelUrl", "notificationUrl", "customParameters", "customer", "billing", "shipping", "createRegistration", "originator", "returnTo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        shopperResultUrl: typing.Union[MetaOapg.properties.shopperResultUrl, str, ],
        merchantTransactionId: typing.Union[MetaOapg.properties.merchantTransactionId, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        nonce: typing.Union[MetaOapg.properties.nonce, str, ],
        defaultPaymentMethod: typing.Union[MetaOapg.properties.defaultPaymentMethod, str, schemas.Unset] = schemas.unset,
        forceDefaultMethod: typing.Union[MetaOapg.properties.forceDefaultMethod, bool, schemas.Unset] = schemas.unset,
        merchantInvoiceId: typing.Union[MetaOapg.properties.merchantInvoiceId, str, schemas.Unset] = schemas.unset,
        cancelUrl: typing.Union[MetaOapg.properties.cancelUrl, str, schemas.Unset] = schemas.unset,
        notificationUrl: typing.Union[MetaOapg.properties.notificationUrl, str, schemas.Unset] = schemas.unset,
        customParameters: typing.Union['CheckoutV2CustomParameters', schemas.Unset] = schemas.unset,
        customer: typing.Union['CheckoutV2Customer', schemas.Unset] = schemas.unset,
        billing: typing.Union['CheckoutV2Billing', schemas.Unset] = schemas.unset,
        shipping: typing.Union['CheckoutV2Shipping', schemas.Unset] = schemas.unset,
        createRegistration: typing.Union[MetaOapg.properties.createRegistration, bool, schemas.Unset] = schemas.unset,
        originator: typing.Union[MetaOapg.properties.originator, str, schemas.Unset] = schemas.unset,
        returnTo: typing.Union[MetaOapg.properties.returnTo, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CheckoutV2':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            shopperResultUrl=shopperResultUrl,
            merchantTransactionId=merchantTransactionId,
            currency=currency,
            nonce=nonce,
            defaultPaymentMethod=defaultPaymentMethod,
            forceDefaultMethod=forceDefaultMethod,
            merchantInvoiceId=merchantInvoiceId,
            cancelUrl=cancelUrl,
            notificationUrl=notificationUrl,
            customParameters=customParameters,
            customer=customer,
            billing=billing,
            shipping=shipping,
            createRegistration=createRegistration,
            originator=originator,
            returnTo=returnTo,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.checkout_v2_billing import CheckoutV2Billing
from peach_payments_python_sdk.model.checkout_v2_custom_parameters import CheckoutV2CustomParameters
from peach_payments_python_sdk.model.checkout_v2_customer import CheckoutV2Customer
from peach_payments_python_sdk.model.checkout_v2_shipping import CheckoutV2Shipping
