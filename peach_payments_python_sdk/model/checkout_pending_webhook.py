# coding: utf-8

"""
    Payments API inbound

    The Payments API enables you to do a custom integration with Peach Payments and thereby support multiple payment methods.

    The version of the OpenAPI document: 2.0.0
    Contact: support@peachpayments.com
    Created by: https://support.peachpayments.com/support/home
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from peach_payments_python_sdk import schemas  # noqa: F401


class CheckoutPendingWebhook(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Webhook sent when a transaction is created on a checkout instance.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    id = schemas.StrSchema
                    
                    
                    class paymentBrand(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "VISA": "VISA",
                                "MASTERCARD": "MASTERCARD",
                                "DINERS CLUB": "DINERS_CLUB",
                                "AMERICAN EXPRESS": "AMERICAN_EXPRESS",
                                "MASTERPASS": "MASTERPASS",
                                "MOBICRED": "MOBICRED",
                                "EFTSECURE": "EFTSECURE",
                                "MPESA": "MPESA",
                                "1FORYOU": "_1FORYOU",
                                "APLUS": "APLUS",
                                "PAYPAL": "PAYPAL",
                                "ZEROPAY": "ZEROPAY",
                                "PAYFLEX": "PAYFLEX",
                                "FINCHOICEPAY": "FINCHOICEPAY",
                                "BLINKBYEMTEL": "BLINKBYEMTEL",
                                "CAPITECPAY": "CAPITECPAY",
                                "NEDBANKDIRECTEFT": "NEDBANKDIRECTEFT",
                                "PAYBYBANK": "PAYBYBANK",
                                "MCBJUICE": "MCBJUICE",
                            }
                        
                        @schemas.classproperty
                        def VISA(cls):
                            return cls("VISA")
                        
                        @schemas.classproperty
                        def MASTERCARD(cls):
                            return cls("MASTERCARD")
                        
                        @schemas.classproperty
                        def DINERS_CLUB(cls):
                            return cls("DINERS CLUB")
                        
                        @schemas.classproperty
                        def AMERICAN_EXPRESS(cls):
                            return cls("AMERICAN EXPRESS")
                        
                        @schemas.classproperty
                        def MASTERPASS(cls):
                            return cls("MASTERPASS")
                        
                        @schemas.classproperty
                        def MOBICRED(cls):
                            return cls("MOBICRED")
                        
                        @schemas.classproperty
                        def EFTSECURE(cls):
                            return cls("EFTSECURE")
                        
                        @schemas.classproperty
                        def MPESA(cls):
                            return cls("MPESA")
                        
                        @schemas.classproperty
                        def _1FORYOU(cls):
                            return cls("1FORYOU")
                        
                        @schemas.classproperty
                        def APLUS(cls):
                            return cls("APLUS")
                        
                        @schemas.classproperty
                        def PAYPAL(cls):
                            return cls("PAYPAL")
                        
                        @schemas.classproperty
                        def ZEROPAY(cls):
                            return cls("ZEROPAY")
                        
                        @schemas.classproperty
                        def PAYFLEX(cls):
                            return cls("PAYFLEX")
                        
                        @schemas.classproperty
                        def FINCHOICEPAY(cls):
                            return cls("FINCHOICEPAY")
                        
                        @schemas.classproperty
                        def BLINKBYEMTEL(cls):
                            return cls("BLINKBYEMTEL")
                        
                        @schemas.classproperty
                        def CAPITECPAY(cls):
                            return cls("CAPITECPAY")
                        
                        @schemas.classproperty
                        def NEDBANKDIRECTEFT(cls):
                            return cls("NEDBANKDIRECTEFT")
                        
                        @schemas.classproperty
                        def PAYBYBANK(cls):
                            return cls("PAYBYBANK")
                        
                        @schemas.classproperty
                        def MCBJUICE(cls):
                            return cls("MCBJUICE")
                    result_code = schemas.StrSchema
                    result_description = schemas.StrSchema
                    __annotations__ = {
                        "id": id,
                        "paymentBrand": paymentBrand,
                        "result.code": result_code,
                        "result.description": result_description,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["paymentBrand"]) -> MetaOapg.properties.paymentBrand: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["result.code"]) -> MetaOapg.properties.result_code: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["result.description"]) -> MetaOapg.properties.result_description: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "paymentBrand", "result.code", "result.description", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["paymentBrand"]) -> typing.Union[MetaOapg.properties.paymentBrand, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["result.code"]) -> typing.Union[MetaOapg.properties.result_code, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["result.description"]) -> typing.Union[MetaOapg.properties.result_description, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "paymentBrand", "result.code", "result.description", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                paymentBrand: typing.Union[MetaOapg.properties.paymentBrand, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    id=id,
                    paymentBrand=paymentBrand,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CheckoutBaseWebhook,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CheckoutPendingWebhook':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from peach_payments_python_sdk.model.checkout_base_webhook import CheckoutBaseWebhook
